HTTPメッセージについて
・Webブラウザからの要求である「HTTP⚪︎⚪︎⚪︎⚪︎⚪︎」HTTPリクエスト
→3つに分けられる
　　・「リ⚪︎⚪︎⚪︎⚪︎行」・・・サーバーに対して欲しい処理をリクエスト(例：GET /index.html)　リクエスト行
　　・「メ⚪︎⚪︎⚪︎⚪︎ヘッダー」 ・・・サーバーの種類、送信するデータの形式などの付加価値情報を記述。メッセージヘッダー
　　・「メ⚪︎⚪︎⚪︎⚪︎ボディ」・・・フォーム欄など入力されたテキストデータを送る目的で使用。メッセージボディ

・Webサーバーからの応答である「HTTP⚪︎⚪︎⚪︎⚪︎⚪︎」HTTPレスポンス
　・「ス⚪︎⚪︎⚪︎⚪︎行」・・・ブラウザから受け取った処理結果を伝える(例：HTTP/1.1 200 OK)　ステータス行
　・「メ⚪︎⚪︎⚪︎⚪︎ヘッダー」・・・サーバーの種類データ形式など記載　メッセージヘッダー
　・「メ⚪︎⚪︎⚪︎⚪︎ボディ」・・・ブラウザからリクエストされたHTMLデータなど格納　メッセージボディ

「HTTP⚪︎⚪︎⚪︎⚪︎」・・・リクエストから具体的な要求内容を伝えている。HTTPメソッド
「⚪︎⚪︎⚪︎メソッド」・・・HTML、画像ファイルなどのコンテンツを取得。GETメソッド
「⚪︎⚪︎⚪︎⚪︎メソッド」・・・データをサーバーへ送信、フォームに入力した情報(メアド、パスワードなど)を転送する場合に利用する　POSTメソッド

ステータスコードについて
〇00番台・・・continue(継続中)　100
〇00番台・・・クライアントのエラーであることを通知(URLが見つからない、Not Foundなど) 400
〇00番台・・・OK(正常に受理) 200
〇00番台・・・サーバーのエラーであることを通知(サーバー内部でエラー発生、アクセス集中、メンテナンスなど) 500
〇00番台・・・リクエストに対して、転送処理などが必要であることを通知する（URLが変更されていたなど） 300

TCPについて
WEbサイトの閲覧だけでなく、メールの送受信やデータ転送時にも利用される。
その際に、クライアントとサーバーが「コ⚪︎⚪︎⚪︎⚪︎⚪︎」と呼ばれる通信経路を確立してからデータのやり取りを行う。コンパイラー
確率は次の3回のやり取りを行う
1.クライアントからサーバーへ接続を要求するための「S⚪︎⚪︎パケット」というデータを送る　SYN
2.信頼性のあるデータ通信を実現するために、データ送信後、必ず送信相手からの確認応答(A⚪︎⚪︎パケット)を受け取る。同時に接続要求を行う。ACK
3.サーバーからの接続要求に対してクライアントはA⚪︎⚪︎パケットを送信する。

HTTP1.1について
HTTPキ⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎・・・HTTPリクエストごとに通信経路を確立することなく、継続して利用できる方式。HTTPキープアライブ
HTTPパ⚪︎⚪︎⚪︎⚪︎⚪︎・・・HTTPリクエストに対するHTTPレスポンスを待つことなく、複数の　HTTPリクエストを送る機能。HTTPパイプライン

HTTP/2について
1つのコネクション上に「ス⚪︎⚪︎⚪︎⚪︎」と呼ばれる仮想的な通信経路を複数生成し、そこでリクエストとレスポンスのやり取りを行う。
バイナリ形式(リクエストをフレームに分けて送信)、　
ヘッダー圧縮(重複したデータを省き、差分のみ転送する)、
サーバープッシュ(リクエスト内容を元に、必要なファイルを判別して、地クエストなしに事前にサーバーから転送)
ストリーム

サイト利用に、クレジットカード情報、データ改ざん、なりすましサイトから個人情報など大切なデータを守るシステムを
「H⚪︎⚪︎⚪︎⚪︎」という。
正式名称：H⚪︎⚪︎⚪︎ over S⚪︎⚪︎[⚪︎⚪︎⚪︎⚪︎re ⚪︎⚪︎⚪︎⚪︎⚪︎ts ⚪︎⚪︎⚪︎er]/T⚪︎⚪︎[⚪︎⚪︎⚪︎⚪︎port ⚪︎⚪︎⚪︎er ⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎ty]
HTTPS　HTTP　over SSL/TLS [Secure Sockets Layer/Transport Layer security
3つの仕組みで安全性を確保
1.盗聴防止
　データを暗号化させて送信する。
2.改ざん防止
　「メッセージダ⚪︎⚪︎⚪︎⚪︎⚪︎」（データから一意の短いデータ(ハッシュ値)を取り出す計算方法)を利用する。メッセージダイジェスト
3.なりすまし防止
　サーバーに「S⚪︎⚪︎　サ⚪︎⚪︎⚪︎証明書」と呼ばれる電子証明書を配置することで、サイトを運営する会社の身元を確認する。SSL　サーバー証明書
　証明書は「⚪︎⚪︎局」による運営元の認証作業を通過する必要がある。認証局

認証されていれば、http→httpsになる。

次の4つフェーズのやり取りを行う必要がある。
1.暗号化方式の決定
2.通信相手の証明
3.鍵の交換
4.暗号化方式の確認
これら４つのフェーズを「S⚪︎⚪︎/T⚪︎⚪︎ ハ⚪︎⚪︎シ⚪︎⚪︎⚪︎」と呼ばれる。
SSL/TLS　ハンドシェイク　
状態を保持しておき、以降のやり取りでも覚えていること「ス⚪︎⚪︎⚪︎フ⚪︎」　という。ステートフル
状態を保持せずに、毎回リセットするものを「ス⚪︎⚪︎⚪︎レ⚪︎」ステートレス


ショッピングサイトなどで、状態を保持して管理するものに、「C⚪︎⚪︎⚪︎⚪︎⚪︎」と呼ばれるデータが用いられる。
そのデータの送信に、メッセージヘッダーが利用される
サーバーは、レスポンスに「Set-C⚪︎⚪︎⚪︎⚪︎⚪︎」ヘッダーを含めることで送信できて、
ブラウザはリクエストに、「C⚪︎⚪︎⚪︎⚪︎⚪︎」ヘッダーを含めることで送信できる
cokkie
有効期限が設定されていない⚪︎⚪︎⚪︎⚪︎⚪︎は、ブラウザが閉じられると同時に削除される。これを「セ⚪︎⚪︎⚪︎⚪︎ C⚪︎⚪︎⚪︎⚪︎⚪︎」と呼ぶ。
有効期限が設定された⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎は、ブラウザを閉じても削除されず、有効期限が来るまで残る。
cokkie セッションcookie 
ブラウザとサーバーのやり取りにおいて、一連の関連性のある処理の流れを「セ⚪︎⚪︎⚪︎⚪︎」という。セッション
⚪︎⚪︎⚪︎⚪︎⚪︎管理において、ブラウザを識別するための情報を「⚪︎⚪︎⚪︎⚪︎⚪︎ID」という。セッション

情報やデータ(人、会社、書籍など)といったリソースを識別するための記述方法を「⚪︎⚪︎I(⚪︎⚪︎⚪︎⚪︎⚪︎⚪m ⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎⚪e ⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎r)」という。
リソースが示す場所(ネットにおける住所のこと)をU⚪︎⚪︎(⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎m ⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎e ⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎r)という。
URI (Uniform Resource Identifier) 
URL (Uniform Resource Locator)

リソースの名前のみを示すものをU⚪︎⚪︎(⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎m ⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎⚪︎e ⚪︎⚪︎⚪︎e)という。書籍を一意に特定するのもこれ。
HTTPリクエストの場合、リクエストの行のメソッドに続いて記述されるため、「リクエスト⚪︎⚪︎⚪︎」とも呼ばれる。
絶対U⚪︎⚪︎形式と相対U⚪︎⚪︎形式があり、通常は相対⚪︎⚪︎⚪︎形式で記述される。
URN(Uniform Resource Name) リクエストURI　
パ⚪︎⚪︎⚪︎⚪︎エ⚪︎コ⚪︎⚪︎⚪︎⚪︎⚪︎・・・%の後に文字コードを16進数で表した形に変換される。
パーセントエンコーディング
